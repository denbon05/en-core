---
- name: Deploy app
  hosts: webservers
  gather_facts: true

  tasks:
    - name: Add vars for the app
      ansible.builtin.blockinfile:
        block: "{{ lookup('ansible.builtin.template', 'env.j2') }}"
        insertbefore: 'BOF'
        path: './.env'
        mode: '0644'
        owner: '{{ ansible_env.USER }}'
        create: true

    - name: Retrieve app exposed port
      tags: [compose]
      ansible.builtin.command: "grep -oP '(?<=EXPOSE.)\\d+' {{ app_dirpath }}/Dockerfile.prod"
      register: prod_dockerfile
      delegate_to: localhost
      changed_when: app_container_state == 'started'

    - name: Compose up
      tags: [compose]
      vars:
        host_docker_internal: '172.17.0.1'
        nginx_cert_filepath: /etc/nginx/certs/certificate.crt
        nginx_privatekey_filepath: /etc/nginx/certs/private.key
      block:
        - name: Set nginx config
          ansible.builtin.template:
            src: nginx.conf.j2
            dest: '{{ ansible_env.HOME }}/nginx.conf'
            mode: '0644'
          register: nginx_conf

        - name: Launch compose app
          community.docker.docker_compose:
            api_version: '3'
            project_name: en-core
            state: '{{ app_compose_state }}'
            restarted: '{{ nginx_conf.changed }}'
            definition:
              services:
                nginx:
                  image: nginx:alpine
                  restart: unless-stopped
                  depends_on:
                    - app
                  volumes:
                    - '{{ ansible_env.HOME }}/nginx.conf:/etc/nginx/nginx.conf:ro'
                    - '{{ ssl.cert_filepath }}:{{ nginx_cert_filepath }}:ro'
                    - '{{ ssl.privatekey_filepath }}:{{ nginx_privatekey_filepath }}:ro'
                  ports:
                    - '80:80'
                    - '443:443'
                app:
                  image: '{{ app_image_name }}:{{ app_image_tag }}'
                  restart: unless-stopped
                  # allows connection to local db from container
                  extra_hosts:
                    { 'host.docker.internal': '{{ host_docker_internal }}' }
                  ports:
                    - '{{ app_container_port }}:{{ prod_dockerfile.stdout }}'
                  env_file: '{{ ansible_env.HOME }}/.env'
