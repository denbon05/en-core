// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DATABASE_URL")
}

// List of roles.
enum Role {
  SUPERADMIN @map("superadmin")
  ADMIN      @map("admin")
  TUTOR      @map("tutor")
  STUDENT    @map("student")
  GUEST      @map("guest")

  @@map("_Role")
}

// Permissions should be use for particular role only.
model AclPermission {
  id               Int                @id @default(autoincrement())
  name             String             @unique
  rolesPermissions RolesPermissions[]
}

// Available roles.
model AclRole {
  id               Int                @id @default(autoincrement())
  name             Role               @unique @default(STUDENT)
  rolesPermissions RolesPermissions[]
  userRoles        UserRoles[]
}

// Table for connection role with permissions.
model RolesPermissions {
  roleId        Int
  permissionId  Int
  aclPermission AclPermission @relation(fields: [permissionId], references: [id], onDelete: Cascade)
  aclRole       AclRole       @relation(fields: [roleId], references: [id], onDelete: Cascade)

  @@id([roleId, permissionId])
}

// Table for manage google data.
model Google {
  oauth       Json
  calendarIds String[] @db.VarChar()
  userId      Int      @unique
  user        User     @relation(fields: [userId], references: [id])
}

model UserRoles {
  userId Int
  roleId Int
  name   Role

  user User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  role AclRole @relation(fields: [roleId], references: [id], onDelete: Cascade)

  @@id([userId, roleId])
}

// User data table.
model User {
  id             Int           @id @default(autoincrement())
  email          String        @unique
  firstName      String
  lastName       String
  passwordDigest String
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @default(now())
  google         Google?
  schedule       UserSchedule?
  message        UserMessage[]
  roles          UserRoles[]
}

enum LessonType {
  TRIAL  @map("trial")
  ONCE   @map("once")
  WEEKLY @map("weekly")
}

// Contains scheduled lessons in time with tz format
model UserLessons {
  id           Int          @id @default(autoincrement())
  type         LessonType
  since        DateTime     @db.Timestamptz()
  until        DateTime     @db.Timestamptz()
  scheduleId   Int
  userSchedule UserSchedule @relation(fields: [scheduleId], references: [id])
}

enum UserUnavailableType {
  ONCE   @map("once")
  DAILY  @map("daily")
  WEEKLY @map("weekly")
}

// Contains unavailable datetime in ISO range format
model UserUnavailable {
  id           Int                 @id @default(autoincrement())
  since        DateTime            @db.Timestamptz()
  until        DateTime            @db.Timestamptz()
  type         UserUnavailableType @default(ONCE)
  scheduleId   Int
  userSchedule UserSchedule        @relation(fields: [scheduleId], references: [id])
}

// Users' schedule.
// Contains unavailable time ranges.
model UserSchedule {
  id              Int               @id @default(autoincrement())
  userId          Int               @unique
  user            User              @relation(fields: [userId], references: [id])
  userLesson      UserLessons[]
  userUnavailable UserUnavailable[]
  lessonConfig    LessonConfig?
}

// Desired to store config of the lessons
model LessonConfig {
  id                        Int          @id @default(autoincrement())
  userScheduleId            Int          @unique
  trialDurrationInMinutes   Int          @default(30)
  singleDurrationInMinutes  Int          @default(50)
  regularDurrationInMinutes Int          @default(50)
  userSchedule              UserSchedule @relation(fields: [userScheduleId], references: [id])
}

// Questions sended by user.
model UserMessage {
  id      Int    @id @default(autoincrement())
  email   String @db.VarChar(128)
  name    String @db.VarChar(64)
  message String @db.Text
  userId  Int?
  user    User?  @relation(fields: [userId], references: [id])
}
